/* 
 * OpenAPI definition
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = LoanStreet.LoanServicing.Client.OpenAPIDateConverter;

namespace LoanStreet.LoanServicing.Model
{
    /// <summary>
    /// Deal
    /// </summary>
    [DataContract]
    public partial class Deal :  IEquatable<Deal>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Deal" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Deal() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Deal" /> class.
        /// </summary>
        /// <param name="facility">facility.</param>
        /// <param name="tranches">tranches (required).</param>
        public Deal(Facility facility = default(Facility), List<Tranche> tranches = default(List<Tranche>))
        {
            // to ensure "tranches" is required (not null)
            if (tranches == null)
            {
                throw new InvalidDataException("tranches is a required property for Deal and cannot be null");
            }
            else
            {
                this.Tranches = tranches;
            }

            this.Facility = facility;
        }
        
        /// <summary>
        /// Gets or Sets DealId
        /// </summary>
        [DataMember(Name="dealId", EmitDefaultValue=false)]
        public string DealId { get; private set; }

        /// <summary>
        /// Gets or Sets Facility
        /// </summary>
        [DataMember(Name="facility", EmitDefaultValue=false)]
        public Facility Facility { get; set; }

        /// <summary>
        /// Gets or Sets Tranches
        /// </summary>
        [DataMember(Name="tranches", EmitDefaultValue=false)]
        public List<Tranche> Tranches { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Deal {\n");
            sb.Append("  DealId: ").Append(DealId).Append("\n");
            sb.Append("  Facility: ").Append(Facility).Append("\n");
            sb.Append("  Tranches: ").Append(Tranches).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Deal);
        }

        /// <summary>
        /// Returns true if Deal instances are equal
        /// </summary>
        /// <param name="input">Instance of Deal to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Deal input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DealId == input.DealId ||
                    (this.DealId != null &&
                    this.DealId.Equals(input.DealId))
                ) && 
                (
                    this.Facility == input.Facility ||
                    (this.Facility != null &&
                    this.Facility.Equals(input.Facility))
                ) && 
                (
                    this.Tranches == input.Tranches ||
                    this.Tranches != null &&
                    input.Tranches != null &&
                    this.Tranches.SequenceEqual(input.Tranches)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DealId != null)
                    hashCode = hashCode * 59 + this.DealId.GetHashCode();
                if (this.Facility != null)
                    hashCode = hashCode * 59 + this.Facility.GetHashCode();
                if (this.Tranches != null)
                    hashCode = hashCode * 59 + this.Tranches.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
