/* 
 * OpenAPI definition
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = LoanStreet.LoanServicing.Client.OpenAPIDateConverter;

namespace LoanStreet.LoanServicing.Model
{
    /// <summary>
    /// LoanRole
    /// </summary>
    [DataContract]
    public partial class LoanRole :  IEquatable<LoanRole>, IValidatableObject
    {
        /// <summary>
        /// Defines Role
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RoleEnum
        {
            /// <summary>
            /// Enum BORROWER for value: BORROWER
            /// </summary>
            [EnumMember(Value = "BORROWER")]
            BORROWER = 1,

            /// <summary>
            /// Enum AGENT for value: AGENT
            /// </summary>
            [EnumMember(Value = "AGENT")]
            AGENT = 2,

            /// <summary>
            /// Enum LENDER for value: LENDER
            /// </summary>
            [EnumMember(Value = "LENDER")]
            LENDER = 3

        }

        /// <summary>
        /// Gets or Sets Role
        /// </summary>
        [DataMember(Name="role", EmitDefaultValue=false)]
        public RoleEnum Role { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="LoanRole" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected LoanRole() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="LoanRole" /> class.
        /// </summary>
        /// <param name="institutionId">institutionId (required).</param>
        /// <param name="role">role (required).</param>
        public LoanRole(string institutionId = default(string), RoleEnum role = default(RoleEnum))
        {
            // to ensure "institutionId" is required (not null)
            if (institutionId == null)
            {
                throw new InvalidDataException("institutionId is a required property for LoanRole and cannot be null");
            }
            else
            {
                this.InstitutionId = institutionId;
            }

            this.Role = role;
        }
        
        /// <summary>
        /// Gets or Sets InstitutionId
        /// </summary>
        [DataMember(Name="institutionId", EmitDefaultValue=false)]
        public string InstitutionId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LoanRole {\n");
            sb.Append("  InstitutionId: ").Append(InstitutionId).Append("\n");
            sb.Append("  Role: ").Append(Role).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LoanRole);
        }

        /// <summary>
        /// Returns true if LoanRole instances are equal
        /// </summary>
        /// <param name="input">Instance of LoanRole to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LoanRole input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.InstitutionId == input.InstitutionId ||
                    (this.InstitutionId != null &&
                    this.InstitutionId.Equals(input.InstitutionId))
                ) && 
                (
                    this.Role == input.Role ||
                    this.Role.Equals(input.Role)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.InstitutionId != null)
                    hashCode = hashCode * 59 + this.InstitutionId.GetHashCode();
                hashCode = hashCode * 59 + this.Role.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
