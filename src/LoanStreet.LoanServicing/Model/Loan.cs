/* 
 * OpenAPI definition
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = LoanStreet.LoanServicing.Client.OpenAPIDateConverter;

namespace LoanStreet.LoanServicing.Model
{
    /// <summary>
    /// Loan
    /// </summary>
    [DataContract]
    public partial class Loan :  IEquatable<Loan>, IValidatableObject
    {
        /// <summary>
        /// Defines Inner
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum InnerEnum
        {
            /// <summary>
            /// Enum BORROWER for value: BORROWER
            /// </summary>
            [EnumMember(Value = "BORROWER")]
            BORROWER = 1,

            /// <summary>
            /// Enum AGENT for value: AGENT
            /// </summary>
            [EnumMember(Value = "AGENT")]
            AGENT = 2,

            /// <summary>
            /// Enum LENDER for value: LENDER
            /// </summary>
            [EnumMember(Value = "LENDER")]
            LENDER = 3

        }


        /// <summary>
        /// Gets or Sets Permissions
        /// </summary>
        [DataMember(Name="permissions", EmitDefaultValue=false)]
        public Dictionary<string, InnerEnum> Permissions { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Loan" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Loan() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Loan" /> class.
        /// </summary>
        /// <param name="firstPaymentDate">firstPaymentDate (required).</param>
        /// <param name="interestTerms">interestTerms.</param>
        /// <param name="permissions">permissions (required).</param>
        /// <param name="principalAmount">principalAmount (required).</param>
        /// <param name="maxParticipationPercent">maxParticipationPercent (required).</param>
        /// <param name="name">name.</param>
        /// <param name="timeZoneId">timeZoneId (required).</param>
        public Loan(DateTime firstPaymentDate = default(DateTime), InterestTerms interestTerms = default(InterestTerms), Dictionary<string, InnerEnum> permissions = default(Dictionary<string, InnerEnum>), Money principalAmount = default(Money), string maxParticipationPercent = default(string), string name = default(string), string timeZoneId = default(string))
        {
            // to ensure "firstPaymentDate" is required (not null)
            if (firstPaymentDate == null)
            {
                throw new InvalidDataException("firstPaymentDate is a required property for Loan and cannot be null");
            }
            else
            {
                this.FirstPaymentDate = firstPaymentDate;
            }

            this.Permissions = permissions;
            // to ensure "principalAmount" is required (not null)
            if (principalAmount == null)
            {
                throw new InvalidDataException("principalAmount is a required property for Loan and cannot be null");
            }
            else
            {
                this.PrincipalAmount = principalAmount;
            }

            // to ensure "maxParticipationPercent" is required (not null)
            if (maxParticipationPercent == null)
            {
                throw new InvalidDataException("maxParticipationPercent is a required property for Loan and cannot be null");
            }
            else
            {
                this.MaxParticipationPercent = maxParticipationPercent;
            }

            // to ensure "timeZoneId" is required (not null)
            if (timeZoneId == null)
            {
                throw new InvalidDataException("timeZoneId is a required property for Loan and cannot be null");
            }
            else
            {
                this.TimeZoneId = timeZoneId;
            }

            this.InterestTerms = interestTerms;
            this.Name = name;
        }
        
        /// <summary>
        /// Gets or Sets LoanId
        /// </summary>
        [DataMember(Name="loanId", EmitDefaultValue=false)]
        public string LoanId { get; private set; }

        /// <summary>
        /// Gets or Sets FirstPaymentDate
        /// </summary>
        [DataMember(Name="firstPaymentDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime FirstPaymentDate { get; set; }

        /// <summary>
        /// Gets or Sets InterestTerms
        /// </summary>
        [DataMember(Name="interestTerms", EmitDefaultValue=false)]
        public InterestTerms InterestTerms { get; set; }

        /// <summary>
        /// Gets or Sets PrincipalAmount
        /// </summary>
        [DataMember(Name="principalAmount", EmitDefaultValue=false)]
        public Money PrincipalAmount { get; set; }

        /// <summary>
        /// Gets or Sets MaxParticipationPercent
        /// </summary>
        [DataMember(Name="maxParticipationPercent", EmitDefaultValue=false)]
        public string MaxParticipationPercent { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets TimeZoneId
        /// </summary>
        [DataMember(Name="timeZoneId", EmitDefaultValue=false)]
        public string TimeZoneId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Loan {\n");
            sb.Append("  LoanId: ").Append(LoanId).Append("\n");
            sb.Append("  FirstPaymentDate: ").Append(FirstPaymentDate).Append("\n");
            sb.Append("  InterestTerms: ").Append(InterestTerms).Append("\n");
            sb.Append("  Permissions: ").Append(Permissions).Append("\n");
            sb.Append("  PrincipalAmount: ").Append(PrincipalAmount).Append("\n");
            sb.Append("  MaxParticipationPercent: ").Append(MaxParticipationPercent).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  TimeZoneId: ").Append(TimeZoneId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Loan);
        }

        /// <summary>
        /// Returns true if Loan instances are equal
        /// </summary>
        /// <param name="input">Instance of Loan to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Loan input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.LoanId == input.LoanId ||
                    (this.LoanId != null &&
                    this.LoanId.Equals(input.LoanId))
                ) && 
                (
                    this.FirstPaymentDate == input.FirstPaymentDate ||
                    (this.FirstPaymentDate != null &&
                    this.FirstPaymentDate.Equals(input.FirstPaymentDate))
                ) && 
                (
                    this.InterestTerms == input.InterestTerms ||
                    (this.InterestTerms != null &&
                    this.InterestTerms.Equals(input.InterestTerms))
                ) && 
                (
                    this.Permissions == input.Permissions ||
                    this.Permissions.SequenceEqual(input.Permissions)
                ) && 
                (
                    this.PrincipalAmount == input.PrincipalAmount ||
                    (this.PrincipalAmount != null &&
                    this.PrincipalAmount.Equals(input.PrincipalAmount))
                ) && 
                (
                    this.MaxParticipationPercent == input.MaxParticipationPercent ||
                    (this.MaxParticipationPercent != null &&
                    this.MaxParticipationPercent.Equals(input.MaxParticipationPercent))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.TimeZoneId == input.TimeZoneId ||
                    (this.TimeZoneId != null &&
                    this.TimeZoneId.Equals(input.TimeZoneId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LoanId != null)
                    hashCode = hashCode * 59 + this.LoanId.GetHashCode();
                if (this.FirstPaymentDate != null)
                    hashCode = hashCode * 59 + this.FirstPaymentDate.GetHashCode();
                if (this.InterestTerms != null)
                    hashCode = hashCode * 59 + this.InterestTerms.GetHashCode();
                hashCode = hashCode * 59 + this.Permissions.GetHashCode();
                if (this.PrincipalAmount != null)
                    hashCode = hashCode * 59 + this.PrincipalAmount.GetHashCode();
                if (this.MaxParticipationPercent != null)
                    hashCode = hashCode * 59 + this.MaxParticipationPercent.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.TimeZoneId != null)
                    hashCode = hashCode * 59 + this.TimeZoneId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
