/* 
 * OpenAPI definition
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = LoanStreet.LoanServicing.Client.OpenAPIDateConverter;

namespace LoanStreet.LoanServicing.Model
{
    /// <summary>
    /// AclEntryDto
    /// </summary>
    [DataContract]
    public partial class AclEntryDto :  IEquatable<AclEntryDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AclEntryDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AclEntryDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AclEntryDto" /> class.
        /// </summary>
        /// <param name="sid">sid (required).</param>
        /// <param name="isGranting">isGranting (required).</param>
        /// <param name="permission">permission.</param>
        /// <param name="id">id (required).</param>
        public AclEntryDto(string sid = default(string), bool isGranting = default(bool), Permission permission = default(Permission), string id = default(string))
        {
            // to ensure "sid" is required (not null)
            this.Sid = sid ?? throw new ArgumentNullException("sid is a required property for AclEntryDto and cannot be null");;
            this.IsGranting = isGranting;
            // to ensure "id" is required (not null)
            this.Id = id ?? throw new ArgumentNullException("id is a required property for AclEntryDto and cannot be null");;
            this.Permission = permission;
        }
        
        /// <summary>
        /// Gets or Sets Sid
        /// </summary>
        [DataMember(Name="sid", EmitDefaultValue=false)]
        public string Sid { get; set; }

        /// <summary>
        /// Gets or Sets IsGranting
        /// </summary>
        [DataMember(Name="isGranting", EmitDefaultValue=false)]
        public bool IsGranting { get; set; }

        /// <summary>
        /// Gets or Sets Permission
        /// </summary>
        [DataMember(Name="permission", EmitDefaultValue=false)]
        public Permission Permission { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AclEntryDto {\n");
            sb.Append("  Sid: ").Append(Sid).Append("\n");
            sb.Append("  IsGranting: ").Append(IsGranting).Append("\n");
            sb.Append("  Permission: ").Append(Permission).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AclEntryDto);
        }

        /// <summary>
        /// Returns true if AclEntryDto instances are equal
        /// </summary>
        /// <param name="input">Instance of AclEntryDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AclEntryDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Sid == input.Sid ||
                    (this.Sid != null &&
                    this.Sid.Equals(input.Sid))
                ) && 
                (
                    this.IsGranting == input.IsGranting ||
                    this.IsGranting.Equals(input.IsGranting)
                ) && 
                (
                    this.Permission == input.Permission ||
                    (this.Permission != null &&
                    this.Permission.Equals(input.Permission))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Sid != null)
                    hashCode = hashCode * 59 + this.Sid.GetHashCode();
                hashCode = hashCode * 59 + this.IsGranting.GetHashCode();
                if (this.Permission != null)
                    hashCode = hashCode * 59 + this.Permission.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
