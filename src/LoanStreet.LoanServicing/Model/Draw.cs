/* 
 * OpenAPI definition
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = LoanStreet.LoanServicing.Client.OpenAPIDateConverter;

namespace LoanStreet.LoanServicing.Model
{
    /// <summary>
    /// Draw
    /// </summary>
    [DataContract]
    public partial class Draw :  IEquatable<Draw>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Draw" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Draw() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Draw" /> class.
        /// </summary>
        /// <param name="dated">dated.</param>
        /// <param name="firstPaymentDate">firstPaymentDate (required).</param>
        /// <param name="amount">amount (required).</param>
        public Draw(DateTime dated = default(DateTime), DateTime firstPaymentDate = default(DateTime), Money amount = default(Money))
        {
            this.FirstPaymentDate = firstPaymentDate;
            // to ensure "amount" is required (not null)
            this.Amount = amount ?? throw new ArgumentNullException("amount is a required property for Draw and cannot be null");;
            this.Dated = dated;
        }
        
        /// <summary>
        /// Gets or Sets DrawId
        /// </summary>
        [DataMember(Name="drawId", EmitDefaultValue=false)]
        public string DrawId { get; private set; }

        /// <summary>
        /// Gets or Sets Dated
        /// </summary>
        [DataMember(Name="dated", EmitDefaultValue=false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime Dated { get; set; }

        /// <summary>
        /// Gets or Sets FirstPaymentDate
        /// </summary>
        [DataMember(Name="firstPaymentDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime FirstPaymentDate { get; set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public Money Amount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Draw {\n");
            sb.Append("  DrawId: ").Append(DrawId).Append("\n");
            sb.Append("  Dated: ").Append(Dated).Append("\n");
            sb.Append("  FirstPaymentDate: ").Append(FirstPaymentDate).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Draw);
        }

        /// <summary>
        /// Returns true if Draw instances are equal
        /// </summary>
        /// <param name="input">Instance of Draw to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Draw input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DrawId == input.DrawId ||
                    (this.DrawId != null &&
                    this.DrawId.Equals(input.DrawId))
                ) && 
                (
                    this.Dated == input.Dated ||
                    (this.Dated != null &&
                    this.Dated.Equals(input.Dated))
                ) && 
                (
                    this.FirstPaymentDate == input.FirstPaymentDate ||
                    (this.FirstPaymentDate != null &&
                    this.FirstPaymentDate.Equals(input.FirstPaymentDate))
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DrawId != null)
                    hashCode = hashCode * 59 + this.DrawId.GetHashCode();
                if (this.Dated != null)
                    hashCode = hashCode * 59 + this.Dated.GetHashCode();
                if (this.FirstPaymentDate != null)
                    hashCode = hashCode * 59 + this.FirstPaymentDate.GetHashCode();
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
