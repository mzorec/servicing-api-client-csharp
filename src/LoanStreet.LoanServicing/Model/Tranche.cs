/* 
 * OpenAPI definition
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = LoanStreet.LoanServicing.Client.OpenAPIDateConverter;

namespace LoanStreet.LoanServicing.Model
{
    /// <summary>
    /// Tranche
    /// </summary>
    [DataContract]
    public partial class Tranche :  IEquatable<Tranche>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Tranche" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Tranche() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Tranche" /> class.
        /// </summary>
        /// <param name="trancheId">trancheId (required).</param>
        /// <param name="commitmentAmount">commitmentAmount (required).</param>
        public Tranche(string trancheId = default(string), Money commitmentAmount = default(Money))
        {
            // to ensure "trancheId" is required (not null)
            if (trancheId == null)
            {
                throw new InvalidDataException("trancheId is a required property for Tranche and cannot be null");
            }
            else
            {
                this.TrancheId = trancheId;
            }

            // to ensure "commitmentAmount" is required (not null)
            if (commitmentAmount == null)
            {
                throw new InvalidDataException("commitmentAmount is a required property for Tranche and cannot be null");
            }
            else
            {
                this.CommitmentAmount = commitmentAmount;
            }

        }
        
        /// <summary>
        /// Gets or Sets TrancheId
        /// </summary>
        [DataMember(Name="trancheId", EmitDefaultValue=false)]
        public string TrancheId { get; set; }

        /// <summary>
        /// Gets or Sets CommitmentAmount
        /// </summary>
        [DataMember(Name="commitmentAmount", EmitDefaultValue=false)]
        public Money CommitmentAmount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Tranche {\n");
            sb.Append("  TrancheId: ").Append(TrancheId).Append("\n");
            sb.Append("  CommitmentAmount: ").Append(CommitmentAmount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Tranche);
        }

        /// <summary>
        /// Returns true if Tranche instances are equal
        /// </summary>
        /// <param name="input">Instance of Tranche to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Tranche input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TrancheId == input.TrancheId ||
                    (this.TrancheId != null &&
                    this.TrancheId.Equals(input.TrancheId))
                ) && 
                (
                    this.CommitmentAmount == input.CommitmentAmount ||
                    (this.CommitmentAmount != null &&
                    this.CommitmentAmount.Equals(input.CommitmentAmount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TrancheId != null)
                    hashCode = hashCode * 59 + this.TrancheId.GetHashCode();
                if (this.CommitmentAmount != null)
                    hashCode = hashCode * 59 + this.CommitmentAmount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
