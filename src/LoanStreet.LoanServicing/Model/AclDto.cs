/* 
 * OpenAPI definition
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = LoanStreet.LoanServicing.Client.OpenAPIDateConverter;

namespace LoanStreet.LoanServicing.Model
{
    /// <summary>
    /// AclDto
    /// </summary>
    [DataContract]
    public partial class AclDto :  IEquatable<AclDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AclDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AclDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AclDto" /> class.
        /// </summary>
        /// <param name="oid">oid (required).</param>
        /// <param name="entries">entries (required).</param>
        public AclDto(string oid = default(string), List<AclEntryDto> entries = default(List<AclEntryDto>))
        {
            // to ensure "oid" is required (not null)
            this.Oid = oid ?? throw new ArgumentNullException("oid is a required property for AclDto and cannot be null");;
            // to ensure "entries" is required (not null)
            this.Entries = entries ?? throw new ArgumentNullException("entries is a required property for AclDto and cannot be null");;
        }
        
        /// <summary>
        /// Gets or Sets Oid
        /// </summary>
        [DataMember(Name="oid", EmitDefaultValue=false)]
        public string Oid { get; set; }

        /// <summary>
        /// Gets or Sets Entries
        /// </summary>
        [DataMember(Name="entries", EmitDefaultValue=false)]
        public List<AclEntryDto> Entries { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AclDto {\n");
            sb.Append("  Oid: ").Append(Oid).Append("\n");
            sb.Append("  Entries: ").Append(Entries).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AclDto);
        }

        /// <summary>
        /// Returns true if AclDto instances are equal
        /// </summary>
        /// <param name="input">Instance of AclDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AclDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Oid == input.Oid ||
                    (this.Oid != null &&
                    this.Oid.Equals(input.Oid))
                ) && 
                (
                    this.Entries == input.Entries ||
                    this.Entries != null &&
                    input.Entries != null &&
                    this.Entries.SequenceEqual(input.Entries)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Oid != null)
                    hashCode = hashCode * 59 + this.Oid.GetHashCode();
                if (this.Entries != null)
                    hashCode = hashCode * 59 + this.Entries.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
