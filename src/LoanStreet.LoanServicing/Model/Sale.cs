/* 
 * OpenAPI definition
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = LoanStreet.LoanServicing.Client.OpenAPIDateConverter;

namespace LoanStreet.LoanServicing.Model
{
    /// <summary>
    /// Sale
    /// </summary>
    [DataContract]
    public partial class Sale :  IEquatable<Sale>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Sale" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Sale() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Sale" /> class.
        /// </summary>
        /// <param name="buyerInstitutionId">buyerInstitutionId (required).</param>
        /// <param name="effectiveDate">effectiveDate (required).</param>
        /// <param name="poolId">poolId.</param>
        /// <param name="purchasedInterestAmount">purchasedInterestAmount (required).</param>
        /// <param name="purchasedPremiumAmount">purchasedPremiumAmount (required).</param>
        /// <param name="purchasedPrincipalAmount">purchasedPrincipalAmount (required).</param>
        /// <param name="sellerInstitutionId">sellerInstitutionId (required).</param>
        /// <param name="servicingSpreadPercent">servicingSpreadPercent (required).</param>
        public Sale(string buyerInstitutionId = default(string), DateTime effectiveDate = default(DateTime), string poolId = default(string), Money purchasedInterestAmount = default(Money), Money purchasedPremiumAmount = default(Money), Money purchasedPrincipalAmount = default(Money), string sellerInstitutionId = default(string), string servicingSpreadPercent = default(string))
        {
            // to ensure "buyerInstitutionId" is required (not null)
            if (buyerInstitutionId == null)
            {
                throw new InvalidDataException("buyerInstitutionId is a required property for Sale and cannot be null");
            }
            else
            {
                this.BuyerInstitutionId = buyerInstitutionId;
            }

            // to ensure "effectiveDate" is required (not null)
            if (effectiveDate == null)
            {
                throw new InvalidDataException("effectiveDate is a required property for Sale and cannot be null");
            }
            else
            {
                this.EffectiveDate = effectiveDate;
            }

            // to ensure "purchasedInterestAmount" is required (not null)
            if (purchasedInterestAmount == null)
            {
                throw new InvalidDataException("purchasedInterestAmount is a required property for Sale and cannot be null");
            }
            else
            {
                this.PurchasedInterestAmount = purchasedInterestAmount;
            }

            // to ensure "purchasedPremiumAmount" is required (not null)
            if (purchasedPremiumAmount == null)
            {
                throw new InvalidDataException("purchasedPremiumAmount is a required property for Sale and cannot be null");
            }
            else
            {
                this.PurchasedPremiumAmount = purchasedPremiumAmount;
            }

            // to ensure "purchasedPrincipalAmount" is required (not null)
            if (purchasedPrincipalAmount == null)
            {
                throw new InvalidDataException("purchasedPrincipalAmount is a required property for Sale and cannot be null");
            }
            else
            {
                this.PurchasedPrincipalAmount = purchasedPrincipalAmount;
            }

            // to ensure "sellerInstitutionId" is required (not null)
            if (sellerInstitutionId == null)
            {
                throw new InvalidDataException("sellerInstitutionId is a required property for Sale and cannot be null");
            }
            else
            {
                this.SellerInstitutionId = sellerInstitutionId;
            }

            // to ensure "servicingSpreadPercent" is required (not null)
            if (servicingSpreadPercent == null)
            {
                throw new InvalidDataException("servicingSpreadPercent is a required property for Sale and cannot be null");
            }
            else
            {
                this.ServicingSpreadPercent = servicingSpreadPercent;
            }

            this.PoolId = poolId;
        }
        
        /// <summary>
        /// Gets or Sets SaleId
        /// </summary>
        [DataMember(Name="saleId", EmitDefaultValue=false)]
        public string SaleId { get; private set; }

        /// <summary>
        /// Gets or Sets BuyerInstitutionId
        /// </summary>
        [DataMember(Name="buyerInstitutionId", EmitDefaultValue=false)]
        public string BuyerInstitutionId { get; set; }

        /// <summary>
        /// Gets or Sets EffectiveDate
        /// </summary>
        [DataMember(Name="effectiveDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime EffectiveDate { get; set; }

        /// <summary>
        /// Gets or Sets PoolId
        /// </summary>
        [DataMember(Name="poolId", EmitDefaultValue=false)]
        public string PoolId { get; set; }

        /// <summary>
        /// Gets or Sets PurchasedInterestAmount
        /// </summary>
        [DataMember(Name="purchasedInterestAmount", EmitDefaultValue=false)]
        public Money PurchasedInterestAmount { get; set; }

        /// <summary>
        /// Gets or Sets PurchasedPremiumAmount
        /// </summary>
        [DataMember(Name="purchasedPremiumAmount", EmitDefaultValue=false)]
        public Money PurchasedPremiumAmount { get; set; }

        /// <summary>
        /// Gets or Sets PurchasedPrincipalAmount
        /// </summary>
        [DataMember(Name="purchasedPrincipalAmount", EmitDefaultValue=false)]
        public Money PurchasedPrincipalAmount { get; set; }

        /// <summary>
        /// Gets or Sets SellerInstitutionId
        /// </summary>
        [DataMember(Name="sellerInstitutionId", EmitDefaultValue=false)]
        public string SellerInstitutionId { get; set; }

        /// <summary>
        /// Gets or Sets ServicingSpreadPercent
        /// </summary>
        [DataMember(Name="servicingSpreadPercent", EmitDefaultValue=false)]
        public string ServicingSpreadPercent { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Sale {\n");
            sb.Append("  SaleId: ").Append(SaleId).Append("\n");
            sb.Append("  BuyerInstitutionId: ").Append(BuyerInstitutionId).Append("\n");
            sb.Append("  EffectiveDate: ").Append(EffectiveDate).Append("\n");
            sb.Append("  PoolId: ").Append(PoolId).Append("\n");
            sb.Append("  PurchasedInterestAmount: ").Append(PurchasedInterestAmount).Append("\n");
            sb.Append("  PurchasedPremiumAmount: ").Append(PurchasedPremiumAmount).Append("\n");
            sb.Append("  PurchasedPrincipalAmount: ").Append(PurchasedPrincipalAmount).Append("\n");
            sb.Append("  SellerInstitutionId: ").Append(SellerInstitutionId).Append("\n");
            sb.Append("  ServicingSpreadPercent: ").Append(ServicingSpreadPercent).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Sale);
        }

        /// <summary>
        /// Returns true if Sale instances are equal
        /// </summary>
        /// <param name="input">Instance of Sale to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Sale input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SaleId == input.SaleId ||
                    (this.SaleId != null &&
                    this.SaleId.Equals(input.SaleId))
                ) && 
                (
                    this.BuyerInstitutionId == input.BuyerInstitutionId ||
                    (this.BuyerInstitutionId != null &&
                    this.BuyerInstitutionId.Equals(input.BuyerInstitutionId))
                ) && 
                (
                    this.EffectiveDate == input.EffectiveDate ||
                    (this.EffectiveDate != null &&
                    this.EffectiveDate.Equals(input.EffectiveDate))
                ) && 
                (
                    this.PoolId == input.PoolId ||
                    (this.PoolId != null &&
                    this.PoolId.Equals(input.PoolId))
                ) && 
                (
                    this.PurchasedInterestAmount == input.PurchasedInterestAmount ||
                    (this.PurchasedInterestAmount != null &&
                    this.PurchasedInterestAmount.Equals(input.PurchasedInterestAmount))
                ) && 
                (
                    this.PurchasedPremiumAmount == input.PurchasedPremiumAmount ||
                    (this.PurchasedPremiumAmount != null &&
                    this.PurchasedPremiumAmount.Equals(input.PurchasedPremiumAmount))
                ) && 
                (
                    this.PurchasedPrincipalAmount == input.PurchasedPrincipalAmount ||
                    (this.PurchasedPrincipalAmount != null &&
                    this.PurchasedPrincipalAmount.Equals(input.PurchasedPrincipalAmount))
                ) && 
                (
                    this.SellerInstitutionId == input.SellerInstitutionId ||
                    (this.SellerInstitutionId != null &&
                    this.SellerInstitutionId.Equals(input.SellerInstitutionId))
                ) && 
                (
                    this.ServicingSpreadPercent == input.ServicingSpreadPercent ||
                    (this.ServicingSpreadPercent != null &&
                    this.ServicingSpreadPercent.Equals(input.ServicingSpreadPercent))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SaleId != null)
                    hashCode = hashCode * 59 + this.SaleId.GetHashCode();
                if (this.BuyerInstitutionId != null)
                    hashCode = hashCode * 59 + this.BuyerInstitutionId.GetHashCode();
                if (this.EffectiveDate != null)
                    hashCode = hashCode * 59 + this.EffectiveDate.GetHashCode();
                if (this.PoolId != null)
                    hashCode = hashCode * 59 + this.PoolId.GetHashCode();
                if (this.PurchasedInterestAmount != null)
                    hashCode = hashCode * 59 + this.PurchasedInterestAmount.GetHashCode();
                if (this.PurchasedPremiumAmount != null)
                    hashCode = hashCode * 59 + this.PurchasedPremiumAmount.GetHashCode();
                if (this.PurchasedPrincipalAmount != null)
                    hashCode = hashCode * 59 + this.PurchasedPrincipalAmount.GetHashCode();
                if (this.SellerInstitutionId != null)
                    hashCode = hashCode * 59 + this.SellerInstitutionId.GetHashCode();
                if (this.ServicingSpreadPercent != null)
                    hashCode = hashCode * 59 + this.ServicingSpreadPercent.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
