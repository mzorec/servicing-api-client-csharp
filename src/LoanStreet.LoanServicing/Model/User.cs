/* 
 * OpenAPI definition
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = LoanStreet.LoanServicing.Client.OpenAPIDateConverter;

namespace LoanStreet.LoanServicing.Model
{
    /// <summary>
    /// User
    /// </summary>
    [DataContract]
    public partial class User :  IEquatable<User>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="User" /> class.
        /// </summary>
        /// <param name="connection">connection.</param>
        /// <param name="clientId">clientId.</param>
        /// <param name="password">password.</param>
        /// <param name="verifyPassword">verifyPassword.</param>
        /// <param name="username">username.</param>
        /// <param name="email">email.</param>
        /// <param name="emailVerified">emailVerified.</param>
        /// <param name="verifyEmail">verifyEmail.</param>
        /// <param name="phoneNumber">phoneNumber.</param>
        /// <param name="phoneVerified">phoneVerified.</param>
        /// <param name="verifyPhoneNumber">verifyPhoneNumber.</param>
        /// <param name="userId">userId.</param>
        /// <param name="picture">picture.</param>
        /// <param name="name">name.</param>
        /// <param name="nickname">nickname.</param>
        /// <param name="givenName">givenName.</param>
        /// <param name="familyName">familyName.</param>
        /// <param name="createdAt">createdAt.</param>
        /// <param name="updatedAt">updatedAt.</param>
        /// <param name="identities">identities.</param>
        /// <param name="appMetadata">appMetadata.</param>
        /// <param name="userMetadata">userMetadata.</param>
        /// <param name="multifactor">multifactor.</param>
        /// <param name="lastIp">lastIp.</param>
        /// <param name="lastLogin">lastLogin.</param>
        /// <param name="loginsCount">loginsCount.</param>
        /// <param name="blocked">blocked.</param>
        public User(string connection = default(string), string clientId = default(string), string password = default(string), bool verifyPassword = default(bool), string username = default(string), string email = default(string), bool emailVerified = default(bool), bool verifyEmail = default(bool), string phoneNumber = default(string), bool phoneVerified = default(bool), bool verifyPhoneNumber = default(bool), string userId = default(string), string picture = default(string), string name = default(string), string nickname = default(string), string givenName = default(string), string familyName = default(string), DateTime createdAt = default(DateTime), DateTime updatedAt = default(DateTime), List<Identity> identities = default(List<Identity>), Dictionary<string, Object> appMetadata = default(Dictionary<string, Object>), Dictionary<string, Object> userMetadata = default(Dictionary<string, Object>), List<string> multifactor = default(List<string>), string lastIp = default(string), DateTime lastLogin = default(DateTime), int loginsCount = default(int), bool blocked = default(bool))
        {
            this.Connection = connection;
            this.ClientId = clientId;
            this.Password = password;
            this.VerifyPassword = verifyPassword;
            this.Username = username;
            this.Email = email;
            this.EmailVerified = emailVerified;
            this.VerifyEmail = verifyEmail;
            this.PhoneNumber = phoneNumber;
            this.PhoneVerified = phoneVerified;
            this.VerifyPhoneNumber = verifyPhoneNumber;
            this.UserId = userId;
            this.Picture = picture;
            this.Name = name;
            this.Nickname = nickname;
            this.GivenName = givenName;
            this.FamilyName = familyName;
            this.CreatedAt = createdAt;
            this.UpdatedAt = updatedAt;
            this.Identities = identities;
            this.AppMetadata = appMetadata;
            this.UserMetadata = userMetadata;
            this.Multifactor = multifactor;
            this.LastIp = lastIp;
            this.LastLogin = lastLogin;
            this.LoginsCount = loginsCount;
            this.Blocked = blocked;
        }
        
        /// <summary>
        /// Gets or Sets Connection
        /// </summary>
        [DataMember(Name="connection", EmitDefaultValue=false)]
        public string Connection { get; set; }

        /// <summary>
        /// Gets or Sets ClientId
        /// </summary>
        [DataMember(Name="client_id", EmitDefaultValue=false)]
        public string ClientId { get; set; }

        /// <summary>
        /// Gets or Sets Password
        /// </summary>
        [DataMember(Name="password", EmitDefaultValue=false)]
        public string Password { get; set; }

        /// <summary>
        /// Gets or Sets VerifyPassword
        /// </summary>
        [DataMember(Name="verify_password", EmitDefaultValue=false)]
        public bool VerifyPassword { get; set; }

        /// <summary>
        /// Gets or Sets Username
        /// </summary>
        [DataMember(Name="username", EmitDefaultValue=false)]
        public string Username { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets EmailVerified
        /// </summary>
        [DataMember(Name="email_verified", EmitDefaultValue=false)]
        public bool EmailVerified { get; set; }

        /// <summary>
        /// Gets or Sets VerifyEmail
        /// </summary>
        [DataMember(Name="verify_email", EmitDefaultValue=false)]
        public bool VerifyEmail { get; set; }

        /// <summary>
        /// Gets or Sets PhoneNumber
        /// </summary>
        [DataMember(Name="phone_number", EmitDefaultValue=false)]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// Gets or Sets PhoneVerified
        /// </summary>
        [DataMember(Name="phone_verified", EmitDefaultValue=false)]
        public bool PhoneVerified { get; set; }

        /// <summary>
        /// Gets or Sets VerifyPhoneNumber
        /// </summary>
        [DataMember(Name="verify_phone_number", EmitDefaultValue=false)]
        public bool VerifyPhoneNumber { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name="user_id", EmitDefaultValue=false)]
        public string UserId { get; set; }

        /// <summary>
        /// Gets or Sets Picture
        /// </summary>
        [DataMember(Name="picture", EmitDefaultValue=false)]
        public string Picture { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Nickname
        /// </summary>
        [DataMember(Name="nickname", EmitDefaultValue=false)]
        public string Nickname { get; set; }

        /// <summary>
        /// Gets or Sets GivenName
        /// </summary>
        [DataMember(Name="given_name", EmitDefaultValue=false)]
        public string GivenName { get; set; }

        /// <summary>
        /// Gets or Sets FamilyName
        /// </summary>
        [DataMember(Name="family_name", EmitDefaultValue=false)]
        public string FamilyName { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name="updated_at", EmitDefaultValue=false)]
        public DateTime UpdatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Identities
        /// </summary>
        [DataMember(Name="identities", EmitDefaultValue=false)]
        public List<Identity> Identities { get; set; }

        /// <summary>
        /// Gets or Sets AppMetadata
        /// </summary>
        [DataMember(Name="app_metadata", EmitDefaultValue=false)]
        public Dictionary<string, Object> AppMetadata { get; set; }

        /// <summary>
        /// Gets or Sets UserMetadata
        /// </summary>
        [DataMember(Name="user_metadata", EmitDefaultValue=false)]
        public Dictionary<string, Object> UserMetadata { get; set; }

        /// <summary>
        /// Gets or Sets Multifactor
        /// </summary>
        [DataMember(Name="multifactor", EmitDefaultValue=false)]
        public List<string> Multifactor { get; set; }

        /// <summary>
        /// Gets or Sets LastIp
        /// </summary>
        [DataMember(Name="last_ip", EmitDefaultValue=false)]
        public string LastIp { get; set; }

        /// <summary>
        /// Gets or Sets LastLogin
        /// </summary>
        [DataMember(Name="last_login", EmitDefaultValue=false)]
        public DateTime LastLogin { get; set; }

        /// <summary>
        /// Gets or Sets LoginsCount
        /// </summary>
        [DataMember(Name="logins_count", EmitDefaultValue=false)]
        public int LoginsCount { get; set; }

        /// <summary>
        /// Gets or Sets Blocked
        /// </summary>
        [DataMember(Name="blocked", EmitDefaultValue=false)]
        public bool Blocked { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class User {\n");
            sb.Append("  Connection: ").Append(Connection).Append("\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  VerifyPassword: ").Append(VerifyPassword).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  EmailVerified: ").Append(EmailVerified).Append("\n");
            sb.Append("  VerifyEmail: ").Append(VerifyEmail).Append("\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("  PhoneVerified: ").Append(PhoneVerified).Append("\n");
            sb.Append("  VerifyPhoneNumber: ").Append(VerifyPhoneNumber).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  Picture: ").Append(Picture).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Nickname: ").Append(Nickname).Append("\n");
            sb.Append("  GivenName: ").Append(GivenName).Append("\n");
            sb.Append("  FamilyName: ").Append(FamilyName).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  Identities: ").Append(Identities).Append("\n");
            sb.Append("  AppMetadata: ").Append(AppMetadata).Append("\n");
            sb.Append("  UserMetadata: ").Append(UserMetadata).Append("\n");
            sb.Append("  Multifactor: ").Append(Multifactor).Append("\n");
            sb.Append("  LastIp: ").Append(LastIp).Append("\n");
            sb.Append("  LastLogin: ").Append(LastLogin).Append("\n");
            sb.Append("  LoginsCount: ").Append(LoginsCount).Append("\n");
            sb.Append("  Blocked: ").Append(Blocked).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as User);
        }

        /// <summary>
        /// Returns true if User instances are equal
        /// </summary>
        /// <param name="input">Instance of User to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(User input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Connection == input.Connection ||
                    (this.Connection != null &&
                    this.Connection.Equals(input.Connection))
                ) && 
                (
                    this.ClientId == input.ClientId ||
                    (this.ClientId != null &&
                    this.ClientId.Equals(input.ClientId))
                ) && 
                (
                    this.Password == input.Password ||
                    (this.Password != null &&
                    this.Password.Equals(input.Password))
                ) && 
                (
                    this.VerifyPassword == input.VerifyPassword ||
                    this.VerifyPassword.Equals(input.VerifyPassword)
                ) && 
                (
                    this.Username == input.Username ||
                    (this.Username != null &&
                    this.Username.Equals(input.Username))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.EmailVerified == input.EmailVerified ||
                    this.EmailVerified.Equals(input.EmailVerified)
                ) && 
                (
                    this.VerifyEmail == input.VerifyEmail ||
                    this.VerifyEmail.Equals(input.VerifyEmail)
                ) && 
                (
                    this.PhoneNumber == input.PhoneNumber ||
                    (this.PhoneNumber != null &&
                    this.PhoneNumber.Equals(input.PhoneNumber))
                ) && 
                (
                    this.PhoneVerified == input.PhoneVerified ||
                    this.PhoneVerified.Equals(input.PhoneVerified)
                ) && 
                (
                    this.VerifyPhoneNumber == input.VerifyPhoneNumber ||
                    this.VerifyPhoneNumber.Equals(input.VerifyPhoneNumber)
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.Picture == input.Picture ||
                    (this.Picture != null &&
                    this.Picture.Equals(input.Picture))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Nickname == input.Nickname ||
                    (this.Nickname != null &&
                    this.Nickname.Equals(input.Nickname))
                ) && 
                (
                    this.GivenName == input.GivenName ||
                    (this.GivenName != null &&
                    this.GivenName.Equals(input.GivenName))
                ) && 
                (
                    this.FamilyName == input.FamilyName ||
                    (this.FamilyName != null &&
                    this.FamilyName.Equals(input.FamilyName))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                ) && 
                (
                    this.Identities == input.Identities ||
                    this.Identities != null &&
                    input.Identities != null &&
                    this.Identities.SequenceEqual(input.Identities)
                ) && 
                (
                    this.AppMetadata == input.AppMetadata ||
                    this.AppMetadata != null &&
                    input.AppMetadata != null &&
                    this.AppMetadata.SequenceEqual(input.AppMetadata)
                ) && 
                (
                    this.UserMetadata == input.UserMetadata ||
                    this.UserMetadata != null &&
                    input.UserMetadata != null &&
                    this.UserMetadata.SequenceEqual(input.UserMetadata)
                ) && 
                (
                    this.Multifactor == input.Multifactor ||
                    this.Multifactor != null &&
                    input.Multifactor != null &&
                    this.Multifactor.SequenceEqual(input.Multifactor)
                ) && 
                (
                    this.LastIp == input.LastIp ||
                    (this.LastIp != null &&
                    this.LastIp.Equals(input.LastIp))
                ) && 
                (
                    this.LastLogin == input.LastLogin ||
                    (this.LastLogin != null &&
                    this.LastLogin.Equals(input.LastLogin))
                ) && 
                (
                    this.LoginsCount == input.LoginsCount ||
                    this.LoginsCount.Equals(input.LoginsCount)
                ) && 
                (
                    this.Blocked == input.Blocked ||
                    this.Blocked.Equals(input.Blocked)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Connection != null)
                    hashCode = hashCode * 59 + this.Connection.GetHashCode();
                if (this.ClientId != null)
                    hashCode = hashCode * 59 + this.ClientId.GetHashCode();
                if (this.Password != null)
                    hashCode = hashCode * 59 + this.Password.GetHashCode();
                hashCode = hashCode * 59 + this.VerifyPassword.GetHashCode();
                if (this.Username != null)
                    hashCode = hashCode * 59 + this.Username.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                hashCode = hashCode * 59 + this.EmailVerified.GetHashCode();
                hashCode = hashCode * 59 + this.VerifyEmail.GetHashCode();
                if (this.PhoneNumber != null)
                    hashCode = hashCode * 59 + this.PhoneNumber.GetHashCode();
                hashCode = hashCode * 59 + this.PhoneVerified.GetHashCode();
                hashCode = hashCode * 59 + this.VerifyPhoneNumber.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                if (this.Picture != null)
                    hashCode = hashCode * 59 + this.Picture.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Nickname != null)
                    hashCode = hashCode * 59 + this.Nickname.GetHashCode();
                if (this.GivenName != null)
                    hashCode = hashCode * 59 + this.GivenName.GetHashCode();
                if (this.FamilyName != null)
                    hashCode = hashCode * 59 + this.FamilyName.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.UpdatedAt != null)
                    hashCode = hashCode * 59 + this.UpdatedAt.GetHashCode();
                if (this.Identities != null)
                    hashCode = hashCode * 59 + this.Identities.GetHashCode();
                if (this.AppMetadata != null)
                    hashCode = hashCode * 59 + this.AppMetadata.GetHashCode();
                if (this.UserMetadata != null)
                    hashCode = hashCode * 59 + this.UserMetadata.GetHashCode();
                if (this.Multifactor != null)
                    hashCode = hashCode * 59 + this.Multifactor.GetHashCode();
                if (this.LastIp != null)
                    hashCode = hashCode * 59 + this.LastIp.GetHashCode();
                if (this.LastLogin != null)
                    hashCode = hashCode * 59 + this.LastLogin.GetHashCode();
                hashCode = hashCode * 59 + this.LoginsCount.GetHashCode();
                hashCode = hashCode * 59 + this.Blocked.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
