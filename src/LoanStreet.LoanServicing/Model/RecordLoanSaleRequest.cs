/* 
 * OpenAPI definition
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace LoanStreet.LoanServicing.Model
{
    /// <summary>
    ///     RecordLoanSaleRequest
    /// </summary>
    [DataContract]
    public class RecordLoanSaleRequest : IEquatable<RecordLoanSaleRequest>, IValidatableObject
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="RecordLoanSaleRequest" /> class.
        /// </summary>
        /// <param name="saleData">saleData.</param>
        public RecordLoanSaleRequest(LoanSaleData saleData = default)
        {
            SaleData = saleData;
        }

        /// <summary>
        ///     Gets or Sets SaleData
        /// </summary>
        [DataMember(Name = "saleData", EmitDefaultValue = false)]
        public LoanSaleData SaleData { get; set; }

        /// <summary>
        ///     Returns true if RecordLoanSaleRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of RecordLoanSaleRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RecordLoanSaleRequest input)
        {
            if (input == null)
                return false;

            return
                SaleData == input.SaleData ||
                SaleData != null &&
                SaleData.Equals(input.SaleData);
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RecordLoanSaleRequest {\n");
            sb.Append("  SaleData: ").Append(SaleData).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as RecordLoanSaleRequest);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (SaleData != null)
                    hashCode = hashCode * 59 + SaleData.GetHashCode();
                return hashCode;
            }
        }
    }
}