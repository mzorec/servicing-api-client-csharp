/* 
 * OpenAPI definition
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = LoanStreet.LoanServicing.Client.OpenAPIDateConverter;

namespace LoanStreet.LoanServicing.Model
{
    /// <summary>
    /// Borrowing
    /// </summary>
    [DataContract]
    public partial class Borrowing :  IEquatable<Borrowing>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Borrowing" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Borrowing() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Borrowing" /> class.
        /// </summary>
        /// <param name="tranche">tranche.</param>
        /// <param name="originationDate">originationDate (required).</param>
        /// <param name="firstPaymentDate">firstPaymentDate (required).</param>
        /// <param name="principal">principal (required).</param>
        /// <param name="interest">interest.</param>
        public Borrowing(string tranche = default(string), DateTime originationDate = default(DateTime), DateTime firstPaymentDate = default(DateTime), LoanStreet.LoanServicing.Money principal = default(LoanStreet.LoanServicing.Money), InterestTerms interest = default(InterestTerms))
        {
            this.OriginationDate = originationDate;
            this.FirstPaymentDate = firstPaymentDate;
            // to ensure "principal" is required (not null)
            this.Principal = principal ?? throw new ArgumentNullException("principal is a required property for Borrowing and cannot be null");;
            this.Tranche = tranche;
            this.Interest = interest;
        }
        
        /// <summary>
        /// Gets or Sets BorrowingId
        /// </summary>
        [DataMember(Name="borrowingId", EmitDefaultValue=false)]
        public string BorrowingId { get; private set; }

        /// <summary>
        /// Gets or Sets TrancheId
        /// </summary>
        [DataMember(Name="trancheId", EmitDefaultValue=false)]
        public string TrancheId { get; private set; }

        /// <summary>
        /// Gets or Sets Tranche
        /// </summary>
        [DataMember(Name="tranche", EmitDefaultValue=false)]
        public string Tranche { get; set; }

        /// <summary>
        /// Gets or Sets OriginationDate
        /// </summary>
        [DataMember(Name="originationDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime OriginationDate { get; set; }

        /// <summary>
        /// Gets or Sets FirstPaymentDate
        /// </summary>
        [DataMember(Name="firstPaymentDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime FirstPaymentDate { get; set; }

        /// <summary>
        /// Gets or Sets Principal
        /// </summary>
        [DataMember(Name="principal", EmitDefaultValue=false)]
        public LoanStreet.LoanServicing.Money Principal { get; set; }

        /// <summary>
        /// Gets or Sets Interest
        /// </summary>
        [DataMember(Name="interest", EmitDefaultValue=false)]
        public InterestTerms Interest { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Borrowing {\n");
            sb.Append("  BorrowingId: ").Append(BorrowingId).Append("\n");
            sb.Append("  TrancheId: ").Append(TrancheId).Append("\n");
            sb.Append("  Tranche: ").Append(Tranche).Append("\n");
            sb.Append("  OriginationDate: ").Append(OriginationDate).Append("\n");
            sb.Append("  FirstPaymentDate: ").Append(FirstPaymentDate).Append("\n");
            sb.Append("  Principal: ").Append(Principal).Append("\n");
            sb.Append("  Interest: ").Append(Interest).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Borrowing);
        }

        /// <summary>
        /// Returns true if Borrowing instances are equal
        /// </summary>
        /// <param name="input">Instance of Borrowing to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Borrowing input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BorrowingId == input.BorrowingId ||
                    (this.BorrowingId != null &&
                    this.BorrowingId.Equals(input.BorrowingId))
                ) && 
                (
                    this.TrancheId == input.TrancheId ||
                    (this.TrancheId != null &&
                    this.TrancheId.Equals(input.TrancheId))
                ) && 
                (
                    this.Tranche == input.Tranche ||
                    (this.Tranche != null &&
                    this.Tranche.Equals(input.Tranche))
                ) && 
                (
                    this.OriginationDate == input.OriginationDate ||
                    (this.OriginationDate != null &&
                    this.OriginationDate.Equals(input.OriginationDate))
                ) && 
                (
                    this.FirstPaymentDate == input.FirstPaymentDate ||
                    (this.FirstPaymentDate != null &&
                    this.FirstPaymentDate.Equals(input.FirstPaymentDate))
                ) && 
                (
                    this.Principal == input.Principal ||
                    (this.Principal != null &&
                    this.Principal.Equals(input.Principal))
                ) && 
                (
                    this.Interest == input.Interest ||
                    (this.Interest != null &&
                    this.Interest.Equals(input.Interest))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BorrowingId != null)
                    hashCode = hashCode * 59 + this.BorrowingId.GetHashCode();
                if (this.TrancheId != null)
                    hashCode = hashCode * 59 + this.TrancheId.GetHashCode();
                if (this.Tranche != null)
                    hashCode = hashCode * 59 + this.Tranche.GetHashCode();
                if (this.OriginationDate != null)
                    hashCode = hashCode * 59 + this.OriginationDate.GetHashCode();
                if (this.FirstPaymentDate != null)
                    hashCode = hashCode * 59 + this.FirstPaymentDate.GetHashCode();
                if (this.Principal != null)
                    hashCode = hashCode * 59 + this.Principal.GetHashCode();
                if (this.Interest != null)
                    hashCode = hashCode * 59 + this.Interest.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
