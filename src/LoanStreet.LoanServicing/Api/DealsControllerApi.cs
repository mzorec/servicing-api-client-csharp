/* 
 * OpenAPI definition
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using LoanStreet.LoanServicing.Client;
using LoanStreet.LoanServicing.Model;

namespace LoanStreet.LoanServicing.Api
{
    /// <summary>
    ///     Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDealsControllerApiSync : IApiAccessor
    {
        #region Synchronous Operations

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="LoanStreet.LoanServicing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deal"> (optional)</param>
        /// <returns>Deal</returns>
        Deal CreateDeal(Deal deal = default);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="LoanStreet.LoanServicing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deal"> (optional)</param>
        /// <returns>ApiResponse of Deal</returns>
        ApiResponse<Deal> CreateDealWithHttpInfo(Deal deal = default);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="LoanStreet.LoanServicing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dealId"></param>
        /// <returns>Deal</returns>
        Deal FetchDeal(string dealId);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="LoanStreet.LoanServicing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dealId"></param>
        /// <returns>ApiResponse of Deal</returns>
        ApiResponse<Deal> FetchDealWithHttpInfo(string dealId);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="LoanStreet.LoanServicing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Deal&gt;</returns>
        List<Deal> FetchDeals();

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="LoanStreet.LoanServicing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Deal&gt;</returns>
        ApiResponse<List<Deal>> FetchDealsWithHttpInfo();

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="LoanStreet.LoanServicing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dealId"></param>
        /// <param name="deal"> (optional)</param>
        /// <returns>Deal</returns>
        Deal UpdateDeal(string dealId, Deal deal = default);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="LoanStreet.LoanServicing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dealId"></param>
        /// <param name="deal"> (optional)</param>
        /// <returns>ApiResponse of Deal</returns>
        ApiResponse<Deal> UpdateDealWithHttpInfo(string dealId, Deal deal = default);

        #endregion Synchronous Operations
    }

    /// <summary>
    ///     Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDealsControllerApiAsync : IApiAccessor
    {
        #region Asynchronous Operations

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="LoanStreet.LoanServicing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deal"> (optional)</param>
        /// <returns>Task of Deal</returns>
        Task<Deal> CreateDealAsync(Deal deal = default);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="LoanStreet.LoanServicing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deal"> (optional)</param>
        /// <returns>Task of ApiResponse (Deal)</returns>
        Task<ApiResponse<Deal>> CreateDealAsyncWithHttpInfo(Deal deal = default);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="LoanStreet.LoanServicing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dealId"></param>
        /// <returns>Task of Deal</returns>
        Task<Deal> FetchDealAsync(string dealId);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="LoanStreet.LoanServicing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dealId"></param>
        /// <returns>Task of ApiResponse (Deal)</returns>
        Task<ApiResponse<Deal>> FetchDealAsyncWithHttpInfo(string dealId);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="LoanStreet.LoanServicing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Deal&gt;</returns>
        Task<List<Deal>> FetchDealsAsync();

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="LoanStreet.LoanServicing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Deal&gt;)</returns>
        Task<ApiResponse<List<Deal>>> FetchDealsAsyncWithHttpInfo();

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="LoanStreet.LoanServicing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dealId"></param>
        /// <param name="deal"> (optional)</param>
        /// <returns>Task of Deal</returns>
        Task<Deal> UpdateDealAsync(string dealId, Deal deal = default);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="LoanStreet.LoanServicing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dealId"></param>
        /// <param name="deal"> (optional)</param>
        /// <returns>Task of ApiResponse (Deal)</returns>
        Task<ApiResponse<Deal>> UpdateDealAsyncWithHttpInfo(string dealId, Deal deal = default);

        #endregion Asynchronous Operations
    }

    /// <summary>
    ///     Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDealsControllerApi : IDealsControllerApiSync, IDealsControllerApiAsync
    {
    }

    /// <summary>
    ///     Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class DealsControllerApi : IDealsControllerApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        ///     Initializes a new instance of the <see cref="DealsControllerApi" /> class.
        /// </summary>
        /// <returns></returns>
        public DealsControllerApi() : this((string) null)
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="DealsControllerApi" /> class.
        /// </summary>
        /// <returns></returns>
        public DealsControllerApi(string basePath)
        {
            Configuration = LoanServicing.Client.Configuration.MergeConfigurations(
                GlobalConfiguration.Instance,
                new Configuration {BasePath = basePath}
            );
            Client = new ApiClient(Configuration.BasePath);
            AsynchronousClient = new ApiClient(Configuration.BasePath);
            ExceptionFactory = LoanServicing.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="DealsControllerApi" /> class
        ///     using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DealsControllerApi(Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            Configuration = LoanServicing.Client.Configuration.MergeConfigurations(
                GlobalConfiguration.Instance,
                configuration
            );
            Client = new ApiClient(Configuration.BasePath);
            AsynchronousClient = new ApiClient(Configuration.BasePath);
            ExceptionFactory = LoanServicing.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="DealsControllerApi" /> class
        ///     using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public DealsControllerApi(ISynchronousClient client, IAsynchronousClient asyncClient,
            IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            Client = client;
            AsynchronousClient = asyncClient;
            Configuration = configuration;
            ExceptionFactory = LoanServicing.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     The client for accessing this underlying API asynchronously.
        /// </summary>
        public IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        ///     The client for accessing this underlying API synchronously.
        /// </summary>
        public ISynchronousClient Client { get; set; }

        /// <summary>
        ///     Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return Configuration.BasePath;
        }

        /// <summary>
        ///     Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IReadableConfiguration Configuration { get; set; }

        /// <summary>
        ///     Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                return _exceptionFactory;
            }
            set => _exceptionFactory = value;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="LoanStreet.LoanServicing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deal"> (optional)</param>
        /// <returns>Deal</returns>
        public Deal CreateDeal(Deal deal = default)
        {
            var localVarResponse = CreateDealWithHttpInfo(deal);
            return localVarResponse.Data;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="LoanStreet.LoanServicing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deal"> (optional)</param>
        /// <returns>ApiResponse of Deal</returns>
        public ApiResponse<Deal> CreateDealWithHttpInfo(Deal deal = default)
        {
            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = deal;

            // authentication (bearer-token) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
                localVarRequestOptions.HeaderParameters.Add("Authorization",
                    "Basic " + ClientUtils.Base64Encode(Configuration.Username + ":" + Configuration.Password));

            // make the HTTP request
            var localVarResponse = Client.Post<Deal>("/v1/private/deals", localVarRequestOptions, Configuration);

            if (ExceptionFactory != null)
            {
                var _exception = ExceptionFactory("CreateDeal", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="LoanStreet.LoanServicing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deal"> (optional)</param>
        /// <returns>Task of Deal</returns>
        public async Task<Deal> CreateDealAsync(Deal deal = default)
        {
            var localVarResponse = await CreateDealAsyncWithHttpInfo(deal);
            return localVarResponse.Data;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="LoanStreet.LoanServicing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deal"> (optional)</param>
        /// <returns>Task of ApiResponse (Deal)</returns>
        public async Task<ApiResponse<Deal>> CreateDealAsyncWithHttpInfo(Deal deal = default)
        {
            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.Data = deal;

            // authentication (bearer-token) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
                localVarRequestOptions.HeaderParameters.Add("Authorization",
                    "Basic " + ClientUtils.Base64Encode(Configuration.Username + ":" + Configuration.Password));

            // make the HTTP request

            var localVarResponse =
                await AsynchronousClient.PostAsync<Deal>("/v1/private/deals", localVarRequestOptions, Configuration);

            if (ExceptionFactory != null)
            {
                var _exception = ExceptionFactory("CreateDeal", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="LoanStreet.LoanServicing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dealId"></param>
        /// <returns>Deal</returns>
        public Deal FetchDeal(string dealId)
        {
            var localVarResponse = FetchDealWithHttpInfo(dealId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="LoanStreet.LoanServicing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dealId"></param>
        /// <returns>ApiResponse of Deal</returns>
        public ApiResponse<Deal> FetchDealWithHttpInfo(string dealId)
        {
            // verify the required parameter 'dealId' is set
            if (dealId == null)
                throw new ApiException(400,
                    "Missing required parameter 'dealId' when calling DealsControllerApi->FetchDeal");

            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (dealId != null)
                localVarRequestOptions.PathParameters.Add("dealId",
                    ClientUtils.ParameterToString(dealId)); // path parameter

            // authentication (bearer-token) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
                localVarRequestOptions.HeaderParameters.Add("Authorization",
                    "Basic " + ClientUtils.Base64Encode(Configuration.Username + ":" + Configuration.Password));

            // make the HTTP request
            var localVarResponse =
                Client.Get<Deal>("/v1/private/deals/{dealId}", localVarRequestOptions, Configuration);

            if (ExceptionFactory != null)
            {
                var _exception = ExceptionFactory("FetchDeal", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="LoanStreet.LoanServicing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dealId"></param>
        /// <returns>Task of Deal</returns>
        public async Task<Deal> FetchDealAsync(string dealId)
        {
            var localVarResponse = await FetchDealAsyncWithHttpInfo(dealId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="LoanStreet.LoanServicing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dealId"></param>
        /// <returns>Task of ApiResponse (Deal)</returns>
        public async Task<ApiResponse<Deal>> FetchDealAsyncWithHttpInfo(string dealId)
        {
            // verify the required parameter 'dealId' is set
            if (dealId == null)
                throw new ApiException(400,
                    "Missing required parameter 'dealId' when calling DealsControllerApi->FetchDeal");


            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            if (dealId != null)
                localVarRequestOptions.PathParameters.Add("dealId",
                    ClientUtils.ParameterToString(dealId)); // path parameter

            // authentication (bearer-token) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
                localVarRequestOptions.HeaderParameters.Add("Authorization",
                    "Basic " + ClientUtils.Base64Encode(Configuration.Username + ":" + Configuration.Password));

            // make the HTTP request

            var localVarResponse = await AsynchronousClient.GetAsync<Deal>("/v1/private/deals/{dealId}",
                localVarRequestOptions, Configuration);

            if (ExceptionFactory != null)
            {
                var _exception = ExceptionFactory("FetchDeal", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="LoanStreet.LoanServicing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Deal&gt;</returns>
        public List<Deal> FetchDeals()
        {
            var localVarResponse = FetchDealsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="LoanStreet.LoanServicing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Deal&gt;</returns>
        public ApiResponse<List<Deal>> FetchDealsWithHttpInfo()
        {
            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (bearer-token) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
                localVarRequestOptions.HeaderParameters.Add("Authorization",
                    "Basic " + ClientUtils.Base64Encode(Configuration.Username + ":" + Configuration.Password));

            // make the HTTP request
            var localVarResponse = Client.Get<List<Deal>>("/v1/private/deals", localVarRequestOptions, Configuration);

            if (ExceptionFactory != null)
            {
                var _exception = ExceptionFactory("FetchDeals", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="LoanStreet.LoanServicing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Deal&gt;</returns>
        public async Task<List<Deal>> FetchDealsAsync()
        {
            var localVarResponse = await FetchDealsAsyncWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="LoanStreet.LoanServicing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Deal&gt;)</returns>
        public async Task<ApiResponse<List<Deal>>> FetchDealsAsyncWithHttpInfo()
        {
            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);


            // authentication (bearer-token) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
                localVarRequestOptions.HeaderParameters.Add("Authorization",
                    "Basic " + ClientUtils.Base64Encode(Configuration.Username + ":" + Configuration.Password));

            // make the HTTP request

            var localVarResponse =
                await AsynchronousClient.GetAsync<List<Deal>>("/v1/private/deals", localVarRequestOptions,
                    Configuration);

            if (ExceptionFactory != null)
            {
                var _exception = ExceptionFactory("FetchDeals", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="LoanStreet.LoanServicing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dealId"></param>
        /// <param name="deal"> (optional)</param>
        /// <returns>Deal</returns>
        public Deal UpdateDeal(string dealId, Deal deal = default)
        {
            var localVarResponse = UpdateDealWithHttpInfo(dealId, deal);
            return localVarResponse.Data;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="LoanStreet.LoanServicing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dealId"></param>
        /// <param name="deal"> (optional)</param>
        /// <returns>ApiResponse of Deal</returns>
        public ApiResponse<Deal> UpdateDealWithHttpInfo(string dealId, Deal deal = default)
        {
            // verify the required parameter 'dealId' is set
            if (dealId == null)
                throw new ApiException(400,
                    "Missing required parameter 'dealId' when calling DealsControllerApi->UpdateDeal");

            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (dealId != null)
                localVarRequestOptions.PathParameters.Add("dealId",
                    ClientUtils.ParameterToString(dealId)); // path parameter
            localVarRequestOptions.Data = deal;

            // authentication (bearer-token) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
                localVarRequestOptions.HeaderParameters.Add("Authorization",
                    "Basic " + ClientUtils.Base64Encode(Configuration.Username + ":" + Configuration.Password));

            // make the HTTP request
            var localVarResponse =
                Client.Put<Deal>("/v1/private/deals/{dealId}", localVarRequestOptions, Configuration);

            if (ExceptionFactory != null)
            {
                var _exception = ExceptionFactory("UpdateDeal", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="LoanStreet.LoanServicing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dealId"></param>
        /// <param name="deal"> (optional)</param>
        /// <returns>Task of Deal</returns>
        public async Task<Deal> UpdateDealAsync(string dealId, Deal deal = default)
        {
            var localVarResponse = await UpdateDealAsyncWithHttpInfo(dealId, deal);
            return localVarResponse.Data;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="LoanStreet.LoanServicing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dealId"></param>
        /// <param name="deal"> (optional)</param>
        /// <returns>Task of ApiResponse (Deal)</returns>
        public async Task<ApiResponse<Deal>> UpdateDealAsyncWithHttpInfo(string dealId, Deal deal = default)
        {
            // verify the required parameter 'dealId' is set
            if (dealId == null)
                throw new ApiException(400,
                    "Missing required parameter 'dealId' when calling DealsControllerApi->UpdateDeal");


            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            if (dealId != null)
                localVarRequestOptions.PathParameters.Add("dealId",
                    ClientUtils.ParameterToString(dealId)); // path parameter
            localVarRequestOptions.Data = deal;

            // authentication (bearer-token) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
                localVarRequestOptions.HeaderParameters.Add("Authorization",
                    "Basic " + ClientUtils.Base64Encode(Configuration.Username + ":" + Configuration.Password));

            // make the HTTP request

            var localVarResponse = await AsynchronousClient.PutAsync<Deal>("/v1/private/deals/{dealId}",
                localVarRequestOptions, Configuration);

            if (ExceptionFactory != null)
            {
                var _exception = ExceptionFactory("UpdateDeal", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }
    }
}