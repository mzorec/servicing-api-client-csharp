/* 
 * OpenAPI definition
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using LoanStreet.LoanServicing.Client;
using LoanStreet.LoanServicing.Model;

namespace LoanStreet.LoanServicing.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILoanInvoicesControllerApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LoanStreet.LoanServicing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanId"></param>
        /// <param name="invoice"> (optional)</param>
        /// <returns>Invoice</returns>
        Invoice CreateInvoice (string loanId, Invoice invoice = default(Invoice));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LoanStreet.LoanServicing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanId"></param>
        /// <param name="invoice"> (optional)</param>
        /// <returns>ApiResponse of Invoice</returns>
        ApiResponse<Invoice> CreateInvoiceWithHttpInfo (string loanId, Invoice invoice = default(Invoice));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LoanStreet.LoanServicing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanId"></param>
        /// <param name="invoiceId"></param>
        /// <returns>Invoice</returns>
        Invoice GetInvoice (string loanId, string invoiceId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LoanStreet.LoanServicing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanId"></param>
        /// <param name="invoiceId"></param>
        /// <returns>ApiResponse of Invoice</returns>
        ApiResponse<Invoice> GetInvoiceWithHttpInfo (string loanId, string invoiceId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LoanStreet.LoanServicing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanId"></param>
        /// <returns>List&lt;Invoice&gt;</returns>
        List<Invoice> ListInvoiceHistory (string loanId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LoanStreet.LoanServicing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanId"></param>
        /// <returns>ApiResponse of List&lt;Invoice&gt;</returns>
        ApiResponse<List<Invoice>> ListInvoiceHistoryWithHttpInfo (string loanId);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILoanInvoicesControllerApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LoanStreet.LoanServicing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanId"></param>
        /// <param name="invoice"> (optional)</param>
        /// <returns>Task of Invoice</returns>
        System.Threading.Tasks.Task<Invoice> CreateInvoiceAsync (string loanId, Invoice invoice = default(Invoice));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LoanStreet.LoanServicing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanId"></param>
        /// <param name="invoice"> (optional)</param>
        /// <returns>Task of ApiResponse (Invoice)</returns>
        System.Threading.Tasks.Task<ApiResponse<Invoice>> CreateInvoiceAsyncWithHttpInfo (string loanId, Invoice invoice = default(Invoice));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LoanStreet.LoanServicing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanId"></param>
        /// <param name="invoiceId"></param>
        /// <returns>Task of Invoice</returns>
        System.Threading.Tasks.Task<Invoice> GetInvoiceAsync (string loanId, string invoiceId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LoanStreet.LoanServicing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanId"></param>
        /// <param name="invoiceId"></param>
        /// <returns>Task of ApiResponse (Invoice)</returns>
        System.Threading.Tasks.Task<ApiResponse<Invoice>> GetInvoiceAsyncWithHttpInfo (string loanId, string invoiceId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LoanStreet.LoanServicing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanId"></param>
        /// <returns>Task of List&lt;Invoice&gt;</returns>
        System.Threading.Tasks.Task<List<Invoice>> ListInvoiceHistoryAsync (string loanId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LoanStreet.LoanServicing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanId"></param>
        /// <returns>Task of ApiResponse (List&lt;Invoice&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Invoice>>> ListInvoiceHistoryAsyncWithHttpInfo (string loanId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILoanInvoicesControllerApi : ILoanInvoicesControllerApiSync, ILoanInvoicesControllerApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class LoanInvoicesControllerApi : ILoanInvoicesControllerApi
    {
        private LoanStreet.LoanServicing.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="LoanInvoicesControllerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LoanInvoicesControllerApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LoanInvoicesControllerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LoanInvoicesControllerApi(String basePath)
        {
            this.Configuration = LoanStreet.LoanServicing.Client.Configuration.MergeConfigurations(
                LoanStreet.LoanServicing.Client.GlobalConfiguration.Instance,
                new LoanStreet.LoanServicing.Client.Configuration { BasePath = basePath }
            );
            this.Client = new LoanStreet.LoanServicing.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new LoanStreet.LoanServicing.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = LoanStreet.LoanServicing.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LoanInvoicesControllerApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public LoanInvoicesControllerApi(LoanStreet.LoanServicing.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = LoanStreet.LoanServicing.Client.Configuration.MergeConfigurations(
                LoanStreet.LoanServicing.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new LoanStreet.LoanServicing.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new LoanStreet.LoanServicing.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = LoanStreet.LoanServicing.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LoanInvoicesControllerApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public LoanInvoicesControllerApi(LoanStreet.LoanServicing.Client.ISynchronousClient client,LoanStreet.LoanServicing.Client.IAsynchronousClient asyncClient, LoanStreet.LoanServicing.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = LoanStreet.LoanServicing.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public LoanStreet.LoanServicing.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public LoanStreet.LoanServicing.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public LoanStreet.LoanServicing.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public LoanStreet.LoanServicing.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="LoanStreet.LoanServicing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanId"></param>
        /// <param name="invoice"> (optional)</param>
        /// <returns>Invoice</returns>
        public Invoice CreateInvoice (string loanId, Invoice invoice = default(Invoice))
        {
             LoanStreet.LoanServicing.Client.ApiResponse<Invoice> localVarResponse = CreateInvoiceWithHttpInfo(loanId, invoice);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="LoanStreet.LoanServicing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanId"></param>
        /// <param name="invoice"> (optional)</param>
        /// <returns>ApiResponse of Invoice</returns>
        public LoanStreet.LoanServicing.Client.ApiResponse< Invoice > CreateInvoiceWithHttpInfo (string loanId, Invoice invoice = default(Invoice))
        {
            // verify the required parameter 'loanId' is set
            if (loanId == null)
                throw new LoanStreet.LoanServicing.Client.ApiException(400, "Missing required parameter 'loanId' when calling LoanInvoicesControllerApi->CreateInvoice");

            LoanStreet.LoanServicing.Client.RequestOptions localVarRequestOptions = new LoanStreet.LoanServicing.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = LoanStreet.LoanServicing.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LoanStreet.LoanServicing.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (loanId != null)
                localVarRequestOptions.PathParameters.Add("loanId", LoanStreet.LoanServicing.Client.ClientUtils.ParameterToString(loanId)); // path parameter
            localVarRequestOptions.Data = invoice;


            // make the HTTP request
            var localVarResponse = this.Client.Post< Invoice >("/v1/private/loans/{loanId}/invoices", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateInvoice", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="LoanStreet.LoanServicing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanId"></param>
        /// <param name="invoice"> (optional)</param>
        /// <returns>Task of Invoice</returns>
        public async System.Threading.Tasks.Task<Invoice> CreateInvoiceAsync (string loanId, Invoice invoice = default(Invoice))
        {
             LoanStreet.LoanServicing.Client.ApiResponse<Invoice> localVarResponse = await CreateInvoiceAsyncWithHttpInfo(loanId, invoice);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="LoanStreet.LoanServicing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanId"></param>
        /// <param name="invoice"> (optional)</param>
        /// <returns>Task of ApiResponse (Invoice)</returns>
        public async System.Threading.Tasks.Task<LoanStreet.LoanServicing.Client.ApiResponse<Invoice>> CreateInvoiceAsyncWithHttpInfo (string loanId, Invoice invoice = default(Invoice))
        {
            // verify the required parameter 'loanId' is set
            if (loanId == null)
                throw new LoanStreet.LoanServicing.Client.ApiException(400, "Missing required parameter 'loanId' when calling LoanInvoicesControllerApi->CreateInvoice");


            LoanStreet.LoanServicing.Client.RequestOptions localVarRequestOptions = new LoanStreet.LoanServicing.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (loanId != null)
                localVarRequestOptions.PathParameters.Add("loanId", LoanStreet.LoanServicing.Client.ClientUtils.ParameterToString(loanId)); // path parameter
            localVarRequestOptions.Data = invoice;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Invoice>("/v1/private/loans/{loanId}/invoices", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateInvoice", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="LoanStreet.LoanServicing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanId"></param>
        /// <param name="invoiceId"></param>
        /// <returns>Invoice</returns>
        public Invoice GetInvoice (string loanId, string invoiceId)
        {
             LoanStreet.LoanServicing.Client.ApiResponse<Invoice> localVarResponse = GetInvoiceWithHttpInfo(loanId, invoiceId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="LoanStreet.LoanServicing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanId"></param>
        /// <param name="invoiceId"></param>
        /// <returns>ApiResponse of Invoice</returns>
        public LoanStreet.LoanServicing.Client.ApiResponse< Invoice > GetInvoiceWithHttpInfo (string loanId, string invoiceId)
        {
            // verify the required parameter 'loanId' is set
            if (loanId == null)
                throw new LoanStreet.LoanServicing.Client.ApiException(400, "Missing required parameter 'loanId' when calling LoanInvoicesControllerApi->GetInvoice");

            // verify the required parameter 'invoiceId' is set
            if (invoiceId == null)
                throw new LoanStreet.LoanServicing.Client.ApiException(400, "Missing required parameter 'invoiceId' when calling LoanInvoicesControllerApi->GetInvoice");

            LoanStreet.LoanServicing.Client.RequestOptions localVarRequestOptions = new LoanStreet.LoanServicing.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = LoanStreet.LoanServicing.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LoanStreet.LoanServicing.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (loanId != null)
                localVarRequestOptions.PathParameters.Add("loanId", LoanStreet.LoanServicing.Client.ClientUtils.ParameterToString(loanId)); // path parameter
            if (invoiceId != null)
                localVarRequestOptions.PathParameters.Add("invoiceId", LoanStreet.LoanServicing.Client.ClientUtils.ParameterToString(invoiceId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get< Invoice >("/v1/private/loans/{loanId}/invoices/{invoiceId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInvoice", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="LoanStreet.LoanServicing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanId"></param>
        /// <param name="invoiceId"></param>
        /// <returns>Task of Invoice</returns>
        public async System.Threading.Tasks.Task<Invoice> GetInvoiceAsync (string loanId, string invoiceId)
        {
             LoanStreet.LoanServicing.Client.ApiResponse<Invoice> localVarResponse = await GetInvoiceAsyncWithHttpInfo(loanId, invoiceId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="LoanStreet.LoanServicing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanId"></param>
        /// <param name="invoiceId"></param>
        /// <returns>Task of ApiResponse (Invoice)</returns>
        public async System.Threading.Tasks.Task<LoanStreet.LoanServicing.Client.ApiResponse<Invoice>> GetInvoiceAsyncWithHttpInfo (string loanId, string invoiceId)
        {
            // verify the required parameter 'loanId' is set
            if (loanId == null)
                throw new LoanStreet.LoanServicing.Client.ApiException(400, "Missing required parameter 'loanId' when calling LoanInvoicesControllerApi->GetInvoice");

            // verify the required parameter 'invoiceId' is set
            if (invoiceId == null)
                throw new LoanStreet.LoanServicing.Client.ApiException(400, "Missing required parameter 'invoiceId' when calling LoanInvoicesControllerApi->GetInvoice");


            LoanStreet.LoanServicing.Client.RequestOptions localVarRequestOptions = new LoanStreet.LoanServicing.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (loanId != null)
                localVarRequestOptions.PathParameters.Add("loanId", LoanStreet.LoanServicing.Client.ClientUtils.ParameterToString(loanId)); // path parameter
            if (invoiceId != null)
                localVarRequestOptions.PathParameters.Add("invoiceId", LoanStreet.LoanServicing.Client.ClientUtils.ParameterToString(invoiceId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Invoice>("/v1/private/loans/{loanId}/invoices/{invoiceId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInvoice", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="LoanStreet.LoanServicing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanId"></param>
        /// <returns>List&lt;Invoice&gt;</returns>
        public List<Invoice> ListInvoiceHistory (string loanId)
        {
             LoanStreet.LoanServicing.Client.ApiResponse<List<Invoice>> localVarResponse = ListInvoiceHistoryWithHttpInfo(loanId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="LoanStreet.LoanServicing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanId"></param>
        /// <returns>ApiResponse of List&lt;Invoice&gt;</returns>
        public LoanStreet.LoanServicing.Client.ApiResponse< List<Invoice> > ListInvoiceHistoryWithHttpInfo (string loanId)
        {
            // verify the required parameter 'loanId' is set
            if (loanId == null)
                throw new LoanStreet.LoanServicing.Client.ApiException(400, "Missing required parameter 'loanId' when calling LoanInvoicesControllerApi->ListInvoiceHistory");

            LoanStreet.LoanServicing.Client.RequestOptions localVarRequestOptions = new LoanStreet.LoanServicing.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = LoanStreet.LoanServicing.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LoanStreet.LoanServicing.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (loanId != null)
                localVarRequestOptions.PathParameters.Add("loanId", LoanStreet.LoanServicing.Client.ClientUtils.ParameterToString(loanId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get< List<Invoice> >("/v1/private/loans/{loanId}/invoices", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListInvoiceHistory", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="LoanStreet.LoanServicing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanId"></param>
        /// <returns>Task of List&lt;Invoice&gt;</returns>
        public async System.Threading.Tasks.Task<List<Invoice>> ListInvoiceHistoryAsync (string loanId)
        {
             LoanStreet.LoanServicing.Client.ApiResponse<List<Invoice>> localVarResponse = await ListInvoiceHistoryAsyncWithHttpInfo(loanId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="LoanStreet.LoanServicing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanId"></param>
        /// <returns>Task of ApiResponse (List&lt;Invoice&gt;)</returns>
        public async System.Threading.Tasks.Task<LoanStreet.LoanServicing.Client.ApiResponse<List<Invoice>>> ListInvoiceHistoryAsyncWithHttpInfo (string loanId)
        {
            // verify the required parameter 'loanId' is set
            if (loanId == null)
                throw new LoanStreet.LoanServicing.Client.ApiException(400, "Missing required parameter 'loanId' when calling LoanInvoicesControllerApi->ListInvoiceHistory");


            LoanStreet.LoanServicing.Client.RequestOptions localVarRequestOptions = new LoanStreet.LoanServicing.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (loanId != null)
                localVarRequestOptions.PathParameters.Add("loanId", LoanStreet.LoanServicing.Client.ClientUtils.ParameterToString(loanId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Invoice>>("/v1/private/loans/{loanId}/invoices", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListInvoiceHistory", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
