/* 
 * OpenAPI definition
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using LoanStreet.LoanServicing.Client;
using LoanStreet.LoanServicing.Model;

namespace LoanStreet.LoanServicing.Api
{
    /// <summary>
    ///     Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInstitutionsControllerApiSync : IApiAccessor
    {
        #region Synchronous Operations

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="LoanStreet.LoanServicing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="institution"> (optional)</param>
        /// <returns>Institution</returns>
        Institution Create(Institution institution = default);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="LoanStreet.LoanServicing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="institution"> (optional)</param>
        /// <returns>ApiResponse of Institution</returns>
        ApiResponse<Institution> CreateWithHttpInfo(Institution institution = default);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="LoanStreet.LoanServicing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="institutionId"></param>
        /// <returns>Institution</returns>
        Institution Fetch(string institutionId);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="LoanStreet.LoanServicing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="institutionId"></param>
        /// <returns>ApiResponse of Institution</returns>
        ApiResponse<Institution> FetchWithHttpInfo(string institutionId);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="LoanStreet.LoanServicing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Institution&gt;</returns>
        List<Institution> FetchAll();

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="LoanStreet.LoanServicing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Institution&gt;</returns>
        ApiResponse<List<Institution>> FetchAllWithHttpInfo();

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="LoanStreet.LoanServicing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="institutionId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Object</returns>
        object Update(string institutionId, object body = default);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="LoanStreet.LoanServicing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="institutionId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<object> UpdateWithHttpInfo(string institutionId, object body = default);

        #endregion Synchronous Operations
    }

    /// <summary>
    ///     Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInstitutionsControllerApiAsync : IApiAccessor
    {
        #region Asynchronous Operations

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="LoanStreet.LoanServicing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="institution"> (optional)</param>
        /// <returns>Task of Institution</returns>
        Task<Institution> CreateAsync(Institution institution = default);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="LoanStreet.LoanServicing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="institution"> (optional)</param>
        /// <returns>Task of ApiResponse (Institution)</returns>
        Task<ApiResponse<Institution>> CreateAsyncWithHttpInfo(Institution institution = default);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="LoanStreet.LoanServicing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="institutionId"></param>
        /// <returns>Task of Institution</returns>
        Task<Institution> FetchAsync(string institutionId);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="LoanStreet.LoanServicing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="institutionId"></param>
        /// <returns>Task of ApiResponse (Institution)</returns>
        Task<ApiResponse<Institution>> FetchAsyncWithHttpInfo(string institutionId);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="LoanStreet.LoanServicing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Institution&gt;</returns>
        Task<List<Institution>> FetchAllAsync();

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="LoanStreet.LoanServicing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Institution&gt;)</returns>
        Task<ApiResponse<List<Institution>>> FetchAllAsyncWithHttpInfo();

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="LoanStreet.LoanServicing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="institutionId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of Object</returns>
        Task<object> UpdateAsync(string institutionId, object body = default);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="LoanStreet.LoanServicing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="institutionId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        Task<ApiResponse<object>> UpdateAsyncWithHttpInfo(string institutionId, object body = default);

        #endregion Asynchronous Operations
    }

    /// <summary>
    ///     Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInstitutionsControllerApi : IInstitutionsControllerApiSync, IInstitutionsControllerApiAsync
    {
    }

    /// <summary>
    ///     Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class InstitutionsControllerApi : IInstitutionsControllerApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        ///     Initializes a new instance of the <see cref="InstitutionsControllerApi" /> class.
        /// </summary>
        /// <returns></returns>
        public InstitutionsControllerApi() : this((string) null)
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="InstitutionsControllerApi" /> class.
        /// </summary>
        /// <returns></returns>
        public InstitutionsControllerApi(string basePath)
        {
            Configuration = LoanServicing.Client.Configuration.MergeConfigurations(
                GlobalConfiguration.Instance,
                new Configuration {BasePath = basePath}
            );
            Client = new ApiClient(Configuration.BasePath);
            AsynchronousClient = new ApiClient(Configuration.BasePath);
            ExceptionFactory = LoanServicing.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="InstitutionsControllerApi" /> class
        ///     using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public InstitutionsControllerApi(Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            Configuration = LoanServicing.Client.Configuration.MergeConfigurations(
                GlobalConfiguration.Instance,
                configuration
            );
            Client = new ApiClient(Configuration.BasePath);
            AsynchronousClient = new ApiClient(Configuration.BasePath);
            ExceptionFactory = LoanServicing.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="InstitutionsControllerApi" /> class
        ///     using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public InstitutionsControllerApi(ISynchronousClient client, IAsynchronousClient asyncClient,
            IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            Client = client;
            AsynchronousClient = asyncClient;
            Configuration = configuration;
            ExceptionFactory = LoanServicing.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     The client for accessing this underlying API asynchronously.
        /// </summary>
        public IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        ///     The client for accessing this underlying API synchronously.
        /// </summary>
        public ISynchronousClient Client { get; set; }

        /// <summary>
        ///     Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return Configuration.BasePath;
        }

        /// <summary>
        ///     Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IReadableConfiguration Configuration { get; set; }

        /// <summary>
        ///     Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                return _exceptionFactory;
            }
            set => _exceptionFactory = value;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="LoanStreet.LoanServicing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="institution"> (optional)</param>
        /// <returns>Institution</returns>
        public Institution Create(Institution institution = default)
        {
            var localVarResponse = CreateWithHttpInfo(institution);
            return localVarResponse.Data;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="LoanStreet.LoanServicing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="institution"> (optional)</param>
        /// <returns>ApiResponse of Institution</returns>
        public ApiResponse<Institution> CreateWithHttpInfo(Institution institution = default)
        {
            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = institution;

            // authentication (bearer-token) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
                localVarRequestOptions.HeaderParameters.Add("Authorization",
                    "Basic " + ClientUtils.Base64Encode(Configuration.Username + ":" + Configuration.Password));

            // make the HTTP request
            var localVarResponse =
                Client.Post<Institution>("/v1/private/institutions", localVarRequestOptions, Configuration);

            if (ExceptionFactory != null)
            {
                var _exception = ExceptionFactory("Create", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="LoanStreet.LoanServicing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="institution"> (optional)</param>
        /// <returns>Task of Institution</returns>
        public async Task<Institution> CreateAsync(Institution institution = default)
        {
            var localVarResponse = await CreateAsyncWithHttpInfo(institution);
            return localVarResponse.Data;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="LoanStreet.LoanServicing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="institution"> (optional)</param>
        /// <returns>Task of ApiResponse (Institution)</returns>
        public async Task<ApiResponse<Institution>> CreateAsyncWithHttpInfo(Institution institution = default)
        {
            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.Data = institution;

            // authentication (bearer-token) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
                localVarRequestOptions.HeaderParameters.Add("Authorization",
                    "Basic " + ClientUtils.Base64Encode(Configuration.Username + ":" + Configuration.Password));

            // make the HTTP request

            var localVarResponse = await AsynchronousClient.PostAsync<Institution>("/v1/private/institutions",
                localVarRequestOptions, Configuration);

            if (ExceptionFactory != null)
            {
                var _exception = ExceptionFactory("Create", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="LoanStreet.LoanServicing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="institutionId"></param>
        /// <returns>Institution</returns>
        public Institution Fetch(string institutionId)
        {
            var localVarResponse = FetchWithHttpInfo(institutionId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="LoanStreet.LoanServicing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="institutionId"></param>
        /// <returns>ApiResponse of Institution</returns>
        public ApiResponse<Institution> FetchWithHttpInfo(string institutionId)
        {
            // verify the required parameter 'institutionId' is set
            if (institutionId == null)
                throw new ApiException(400,
                    "Missing required parameter 'institutionId' when calling InstitutionsControllerApi->Fetch");

            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (institutionId != null)
                localVarRequestOptions.PathParameters.Add("institutionId",
                    ClientUtils.ParameterToString(institutionId)); // path parameter

            // authentication (bearer-token) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
                localVarRequestOptions.HeaderParameters.Add("Authorization",
                    "Basic " + ClientUtils.Base64Encode(Configuration.Username + ":" + Configuration.Password));

            // make the HTTP request
            var localVarResponse = Client.Get<Institution>("/v1/private/institutions/{institutionId}",
                localVarRequestOptions, Configuration);

            if (ExceptionFactory != null)
            {
                var _exception = ExceptionFactory("Fetch", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="LoanStreet.LoanServicing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="institutionId"></param>
        /// <returns>Task of Institution</returns>
        public async Task<Institution> FetchAsync(string institutionId)
        {
            var localVarResponse = await FetchAsyncWithHttpInfo(institutionId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="LoanStreet.LoanServicing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="institutionId"></param>
        /// <returns>Task of ApiResponse (Institution)</returns>
        public async Task<ApiResponse<Institution>> FetchAsyncWithHttpInfo(string institutionId)
        {
            // verify the required parameter 'institutionId' is set
            if (institutionId == null)
                throw new ApiException(400,
                    "Missing required parameter 'institutionId' when calling InstitutionsControllerApi->Fetch");


            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            if (institutionId != null)
                localVarRequestOptions.PathParameters.Add("institutionId",
                    ClientUtils.ParameterToString(institutionId)); // path parameter

            // authentication (bearer-token) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
                localVarRequestOptions.HeaderParameters.Add("Authorization",
                    "Basic " + ClientUtils.Base64Encode(Configuration.Username + ":" + Configuration.Password));

            // make the HTTP request

            var localVarResponse =
                await AsynchronousClient.GetAsync<Institution>("/v1/private/institutions/{institutionId}",
                    localVarRequestOptions, Configuration);

            if (ExceptionFactory != null)
            {
                var _exception = ExceptionFactory("Fetch", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="LoanStreet.LoanServicing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Institution&gt;</returns>
        public List<Institution> FetchAll()
        {
            var localVarResponse = FetchAllWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="LoanStreet.LoanServicing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Institution&gt;</returns>
        public ApiResponse<List<Institution>> FetchAllWithHttpInfo()
        {
            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (bearer-token) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
                localVarRequestOptions.HeaderParameters.Add("Authorization",
                    "Basic " + ClientUtils.Base64Encode(Configuration.Username + ":" + Configuration.Password));

            // make the HTTP request
            var localVarResponse =
                Client.Get<List<Institution>>("/v1/private/institutions", localVarRequestOptions, Configuration);

            if (ExceptionFactory != null)
            {
                var _exception = ExceptionFactory("FetchAll", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="LoanStreet.LoanServicing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Institution&gt;</returns>
        public async Task<List<Institution>> FetchAllAsync()
        {
            var localVarResponse = await FetchAllAsyncWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="LoanStreet.LoanServicing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Institution&gt;)</returns>
        public async Task<ApiResponse<List<Institution>>> FetchAllAsyncWithHttpInfo()
        {
            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);


            // authentication (bearer-token) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
                localVarRequestOptions.HeaderParameters.Add("Authorization",
                    "Basic " + ClientUtils.Base64Encode(Configuration.Username + ":" + Configuration.Password));

            // make the HTTP request

            var localVarResponse = await AsynchronousClient.GetAsync<List<Institution>>("/v1/private/institutions",
                localVarRequestOptions, Configuration);

            if (ExceptionFactory != null)
            {
                var _exception = ExceptionFactory("FetchAll", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="LoanStreet.LoanServicing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="institutionId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Object</returns>
        public object Update(string institutionId, object body = default)
        {
            var localVarResponse = UpdateWithHttpInfo(institutionId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="LoanStreet.LoanServicing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="institutionId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<object> UpdateWithHttpInfo(string institutionId, object body = default)
        {
            // verify the required parameter 'institutionId' is set
            if (institutionId == null)
                throw new ApiException(400,
                    "Missing required parameter 'institutionId' when calling InstitutionsControllerApi->Update");

            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (institutionId != null)
                localVarRequestOptions.PathParameters.Add("institutionId",
                    ClientUtils.ParameterToString(institutionId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (bearer-token) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
                localVarRequestOptions.HeaderParameters.Add("Authorization",
                    "Basic " + ClientUtils.Base64Encode(Configuration.Username + ":" + Configuration.Password));

            // make the HTTP request
            var localVarResponse = Client.Put<object>("/v1/private/institutions/{institutionId}",
                localVarRequestOptions, Configuration);

            if (ExceptionFactory != null)
            {
                var _exception = ExceptionFactory("Update", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="LoanStreet.LoanServicing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="institutionId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of Object</returns>
        public async Task<object> UpdateAsync(string institutionId, object body = default)
        {
            var localVarResponse = await UpdateAsyncWithHttpInfo(institutionId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="LoanStreet.LoanServicing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="institutionId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async Task<ApiResponse<object>> UpdateAsyncWithHttpInfo(string institutionId, object body = default)
        {
            // verify the required parameter 'institutionId' is set
            if (institutionId == null)
                throw new ApiException(400,
                    "Missing required parameter 'institutionId' when calling InstitutionsControllerApi->Update");


            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            if (institutionId != null)
                localVarRequestOptions.PathParameters.Add("institutionId",
                    ClientUtils.ParameterToString(institutionId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (bearer-token) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
                localVarRequestOptions.HeaderParameters.Add("Authorization",
                    "Basic " + ClientUtils.Base64Encode(Configuration.Username + ":" + Configuration.Password));

            // make the HTTP request

            var localVarResponse = await AsynchronousClient.PutAsync<object>("/v1/private/institutions/{institutionId}",
                localVarRequestOptions, Configuration);

            if (ExceptionFactory != null)
            {
                var _exception = ExceptionFactory("Update", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }
    }
}