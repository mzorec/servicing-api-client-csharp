/* 
 * OpenAPI definition
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using LoanStreet.LoanServicing.Client;
using LoanStreet.LoanServicing.Api;
using LoanStreet.LoanServicing.Model;

namespace LoanStreet.LoanServicing.Test
{
    /// <summary>
    ///  Class for testing TranchesApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class TranchesApiTests : IDisposable
    {
        private TranchesApi instance;

        public TranchesApiTests()
        {
            instance = new TranchesApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of TranchesApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' TranchesApi
            //Assert.IsType(typeof(TranchesApi), instance, "instance is a TranchesApi");
        }

        
        /// <summary>
        /// Test CreateDraw
        /// </summary>
        [Fact]
        public void CreateDrawTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string facilityId = null;
            //string trancheId = null;
            //Draw draw = null;
            //var response = instance.CreateDraw(facilityId, trancheId, draw);
            //Assert.IsType<Borrowing> (response, "response is Borrowing");
        }
        
        /// <summary>
        /// Test CreateInvoice
        /// </summary>
        [Fact]
        public void CreateInvoiceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string facilityId = null;
            //string trancheId = null;
            //Invoice invoice = null;
            //var response = instance.CreateInvoice(facilityId, trancheId, invoice);
            //Assert.IsType<Invoice> (response, "response is Invoice");
        }
        
        /// <summary>
        /// Test CreatePayment
        /// </summary>
        [Fact]
        public void CreatePaymentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string facilityId = null;
            //string trancheId = null;
            //Payment payment = null;
            //var response = instance.CreatePayment(facilityId, trancheId, payment);
            //Assert.IsType<Payment> (response, "response is Payment");
        }
        
        /// <summary>
        /// Test GetTranche
        /// </summary>
        [Fact]
        public void GetTrancheTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string facilityId = null;
            //string trancheId = null;
            //var response = instance.GetTranche(facilityId, trancheId);
            //Assert.IsType<Tranche> (response, "response is Tranche");
        }
        
        /// <summary>
        /// Test ListTranches
        /// </summary>
        [Fact]
        public void ListTranchesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string facilityId = null;
            //var response = instance.ListTranches(facilityId);
            //Assert.IsType<List<Tranche>> (response, "response is List<Tranche>");
        }
        
    }

}
